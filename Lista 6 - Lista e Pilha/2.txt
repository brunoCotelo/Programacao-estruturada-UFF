/*Considere uma lista onde cada nó é composto pelo código, nome e preço de um produto. A lista está ordenada por ordem crescente do código do produto.

a. Considerando alocação sequencial estática, faça a declaração desta estrutura e uma função que receba esta lista como parâmetro e que escreva os dados de todos os produtos contidos na lista.

b. Considerando uma lista simplesmente encadeada dinâmica, faça a declaração desta estrutura e uma função que calcule e retorne a média de preços.*/

#include <stdio.h>
#include <stdlib.h>

struct tipoProduto{
	int codigo;
	char nome[20];
	float preco;
	struct tipoProduto *prox;
};
typedef struct tipoProduto lista;

int buscaElem(lista *L, int codigo, lista **pre){
  lista *aux, *preL;
  aux = L;
  preL= NULL;
  while ((aux != NULL) && (codigo > aux->codigo)) {
    preL = aux;
    aux = aux->prox;
  }
  (*pre) = preL;
  if ((aux != NULL) && (codigo == aux->codigo))
    return 1;
  return 0;
}

lista *insereElem(lista *L, int cod){
	lista *pre, *el;
  if (!buscaElem(L,cod,&pre)) {
    el = (lista *)malloc(sizeof(lista));
    el->codigo = cod;
		printf("Digite o nome do produto: ");
		scanf(" %[^\n]", el->nome);
		printf("Digite o preço do produto: ");
		scanf("%f", &el->preco);
    if (L == NULL || pre == NULL) {
      el->prox = L;
      L = el;
    } 
		else {
      el->prox = pre->prox;
      pre->prox = el;
    }
	} 
	else{
  	printf("--> Elemento já existe\n");
	}
	return L;
}

void imprimeLista(lista *L) {
  lista *aux;
  aux = L;
  while (aux != NULL) {
    printf("O codigo é: %d\nO nome do produto é: %s\nO preço do produto é: R$%.2f\n\n ", aux->codigo, aux->nome, aux->preco);
    aux = aux->prox;
  } 
}



int main(){
	int n, codigo;
	lista *L, *aux;
	L = NULL;
	printf("Digite o codigo: ");
	scanf("%d", &codigo);
	while(codigo > 0){
		L = insereElem(L, codigo);
		printf("Digite o codigo: ");
		scanf("%d", &codigo);
	}
	imprimeLista(L);
}